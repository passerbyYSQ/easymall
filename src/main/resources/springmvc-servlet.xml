<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 这里绝对不能少。applicationContext.xml中可省略 -->
	<context:component-scan base-package="net.ysq.easymall.controller" />
	<!-- 这里不需要写居然也可以，因为applicationContext已经扫描了整个net.ysq.easymall -->
	<!--  
	<context:component-scan base-package="net.ysq.easymall.service" />
	-->
	
	<!-- 放在前面，否则Date的序列化会无效 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties 
        <property name="validationMessageSource" ref="messageSource"/> -->
    </bean>
    <mvc:annotation-driven validator="validator" />
		
	<!-- Spring里面的Json解析需要用到Jackson，不配置会无法完成Json解析 -->  
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
        <property name="dateFormat">
            <bean class="java.text.SimpleDateFormat">
                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
            </bean>
        </property>
    </bean>
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper" ref="objectMapper" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 默认映射器 -->
	<mvc:default-servlet-handler />
	<!-- 允许upload目录下的内容可见 -->
	<mvc:resources location="WEB-INF/upload/" mapping="/upload/**" />
	
	<!-- 配置文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="defaultEncoding" value="utf-8"/>
	    <property name="maxUploadSize" value="104857600"/> <!-- 100m -->
		<property name="uploadTempDir" value="fileUpload/temp" />
		<property name="maxInMemorySize" value="1024" /> <!-- 大于1M产生临时文件 -->
	</bean>
	
	<!-- 配置视图解析器 -->
	<bean id="internalResourceViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/file/**" />
			<mvc:mapping path="/cart/**" />
			<mvc:mapping path="/order/**" />
			<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
				LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
			<!--  
			<mvc:exclude-mapping path="/" /> -->
			<bean class="net.ysq.easymall.component.LoginInterceptor" />			
		</mvc:interceptor>
	</mvc:interceptors>
	
</beans>